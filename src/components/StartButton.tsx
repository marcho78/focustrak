'use client';

import { useState } from 'react';
import { StartButtonProps } from '@/types';
import { PlayIcon, PlusIcon } from '@heroicons/react/24/solid';

export default function StartButton({
  task,
  onStart,
  isLoading = false,
  disabled = false,
}: StartButtonProps) {
  const [showTaskInput, setShowTaskInput] = useState(false);
  const [taskTitle, setTaskTitle] = useState('');

  const handleQuickStart = () => {
    if (task) {
      onStart(task);
    }
  };

  const handleStartWithNewTask = () => {
    if (taskTitle.trim()) {
      // Create a temporary task object for immediate use
      const newTask = {
        id: `temp-${Date.now()}`,
        userId: 'current-user', // Will be replaced with actual user ID
        title: taskTitle.trim(),
        status: 'pending' as const,
        priority: 2 as const,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        estimatedSessions: 1,
        steps: [], // Will be generated by AI
      };
      onStart(newTask);
      setTaskTitle('');
      setShowTaskInput(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleStartWithNewTask();
    } else if (e.key === 'Escape') {
      setShowTaskInput(false);
      setTaskTitle('');
    }
  };

  if (showTaskInput) {
    return (
      <div className="flex flex-col items-center space-y-4 w-full max-w-md mx-auto">
        <div className="relative w-full">
          <input
            type="text"
            value={taskTitle}
            onChange={(e) => setTaskTitle(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="What do you want to work on?"
            className="w-full px-6 py-4 text-lg rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:outline-none dark:bg-gray-800 dark:border-gray-600 dark:text-white"
            autoFocus
          />
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm">
            Enter to start
          </div>
        </div>
        
        <div className="flex space-x-3">
          <button
            onClick={handleStartWithNewTask}
            disabled={!taskTitle.trim() || isLoading}
            className="flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <PlayIcon className="w-5 h-5 mr-2" />
            Start Focus Session
          </button>
          
          <button
            onClick={() => {
              setShowTaskInput(false);
              setTaskTitle('');
            }}
            className="px-6 py-3 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-800 transition-colors"
          >
            Cancel
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center space-y-6 w-full max-w-md mx-auto">
      {/* Main Start Button */}
      <button
        onClick={handleQuickStart}
        disabled={disabled || isLoading || !task}
        className={`relative w-full h-24 rounded-2xl shadow-lg transition-all duration-200 flex items-center justify-center text-2xl font-semibold ${
          task && !disabled && !isLoading
            ? 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white hover:shadow-xl transform hover:scale-105'
            : 'bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'
        }`}
      >
        {isLoading ? (
          <div className="flex items-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white mr-3"></div>
            Starting...
          </div>
        ) : (
          <div className="flex items-center">
            <PlayIcon className="w-8 h-8 mr-3" />
            {task ? `Start: ${task.title}` : 'Create a task first'}
          </div>
        )}
        
        {/* Pulse animation for emphasis - only when task exists */}
        {task && !disabled && !isLoading && (
          <div className="absolute inset-0 rounded-2xl bg-blue-600 opacity-30 animate-pulse"></div>
        )}
      </button>

      {/* Current task display */}
      {task && (
        <div className="w-full p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <h3 className="font-medium text-gray-900 dark:text-white mb-2">
            Current Task
          </h3>
          <p className="text-gray-700 dark:text-gray-300 mb-2">{task.title}</p>
          {task.steps && task.steps.length > 0 && (
            <div className="space-y-1">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Next steps:
              </p>
              {task.steps.slice(0, 3).map((step, index) => (
                <div
                  key={step.id}
                  className={`text-sm flex items-center ${
                    step.done
                      ? 'text-gray-500 line-through'
                      : 'text-gray-700 dark:text-gray-300'
                  }`}
                >
                  <span className="w-2 h-2 bg-blue-500 rounded-full mr-2 flex-shrink-0"></span>
                  {step.content}
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Add new task button */}
      <button
        onClick={() => setShowTaskInput(true)}
        disabled={disabled || isLoading}
        className="flex items-center px-6 py-3 text-gray-600 dark:text-gray-400 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-gray-400 hover:text-gray-700 dark:hover:border-gray-500 dark:hover:text-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <PlusIcon className="w-5 h-5 mr-2" />
        Add New Task
      </button>

      {/* Quick tips */}
      <div className="text-center text-sm text-gray-500 dark:text-gray-400 max-w-xs">
        <p>ðŸŽ¯ One tap to start a 25-minute focus session</p>
        <p className="mt-1">âœ¨ I&apos;ll help break your task into tiny steps</p>
      </div>
    </div>
  );
}
